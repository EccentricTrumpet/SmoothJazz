// Copyright 2020 The gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package grpc.testing;

service Shengji {
  // Creates a new game.
  rpc CreateGame(CreateGameRequest) returns (Game);

  // Only creator of the game can start/pause/resume a game
  rpc StartGame(StartGameRequest) returns (Game);
  rpc PauseGame(PauseGameRequest) returns (Game);
  rpc ResumeGame(PauseGameRequest) returns (Game);

  // Join a game.
  rpc JoinGame(JoinGameRequest) returns (Game);

  // Leaves a game. A player is considered left automatically after 60s of
  // inactivity.
  rpc LeaveGame(LeaveGameRequest) returns (Game);

  // Returns the game whenever the game state is changed
  rpc EnterRoom(EnterRoomRequest) returns (stream Game);

  // Plays a hand
  rpc PlayGame(PlayGameRequest) returns (Game);

  rpc AddAIPlayer(AddAIPlayerRequest) returns (AddAIPlayerResponse);
}

// Request protos
message AddAIPlayerRequest {
  string game_id = 1;
}

message AddAIPlayerResponse {
  string player_name = 1;
}

message EnterRoomRequest {
  string game_id = 1;
  string player_id = 2;
}

message CreateGameRequest {
  string player_id = 1;
}

message JoinGameRequest {
  string player_id = 1;
  string game_id = 2;
}

message LeaveGameRequest {
  string player_id = 1;
  string game_id = 2;
}

message PauseGameRequest {
  string player_id = 1;
  string game_id = 2;
}

message ResumeGameRequest {
  string player_id = 1;
  string game_id = 2;
}

message StartGameRequest {
  string player_id = 1;
  string game_id = 2;

  // This is the "seating position". 1st player and 3rd player vs. 2nd player
  // and 4th player.
  repeated string ordered_player_ids = 3;
}

message PlayGameRequest{
  string player_id = 1;
  string game_id = 2;
  repeated Card hand = 3;
}

message Card {
  enum Suit {
    UNDEFINED = 0;
    HEATS = 1;
    SPADES = 2;
    CLUBS = 3;
    DIAMONDS = 4;
  }

  enum Num {
    ACE = 0;
    TWO = 1;
    THREE = 2;
    FOUR = 3;
    FIVE = 4;
    SIX = 5;
    SEVEN = 6;
    EIGHT = 7;
    NINE = 8;
    TEN = 9;
    JACK = 10;
    QUEEN = 11;
    KING = 12;
  }

  message RegularCard {
    Suit suit = 1;
    Num num = 2;
  }

  oneof ActualCard {
    RegularCard card = 1;
    bool is_small_joker = 2;
    bool is_big_joker = 3;
  }
}

message Hand {
  repeated Card cards = 1;
}

message Game {
  string game_id = 1;
  string creator_player_id = 2;

	// Ordered list of players
  repeated string player_ids = 3;
	string teammate_id = 4;

  // Game data, including cards on hand, currently played cards on table,
  // score etc.
  GameData data = 7;
}

message GameData {
  enum GameState {
    UNDEFINED = 0;
    NOT_ENOUGH_PLAYERS = 1;
    NOT_STARTED = 2;
    STARTED = 3;
    PAUSED = 4;
    ENDED = 5;
	}

  // Game state
  GameState state = 1;

  // The player that needs to make a move. This field is only set if the game
  // state is STARTED.
  string waiting_for_player_id = 2;

  // Total number of actions since the game was created. This is a monoincrease
  // number that can be used for debugging purposes.
  int32 game_action_count = 3;

  // Current trump cards and suit.
  Card.Suit trump_suit = 4;
	Card.Num trump_num = 5;

  // Cards on hand
  Hand my_hand_cards = 6;

  // Cards currely played on the table, keyed by player_id.
  map<string, Hand> cards_on_table = 7;

  // Scores
  map<string, int32> current_scores = 8;
  map<string, int32> cumulative_scores = 9;
}
