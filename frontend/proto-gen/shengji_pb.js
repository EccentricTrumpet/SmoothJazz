// source: shengji.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.grpc.testing.AddAIPlayerRequest', null, global);
goog.exportSymbol('proto.grpc.testing.AddAIPlayerResponse', null, global);
goog.exportSymbol('proto.grpc.testing.Card', null, global);
goog.exportSymbol('proto.grpc.testing.Card.Num', null, global);
goog.exportSymbol('proto.grpc.testing.Card.Suit', null, global);
goog.exportSymbol('proto.grpc.testing.CreateGameRequest', null, global);
goog.exportSymbol('proto.grpc.testing.EnterRoomRequest', null, global);
goog.exportSymbol('proto.grpc.testing.Game', null, global);
goog.exportSymbol('proto.grpc.testing.Hand', null, global);
goog.exportSymbol('proto.grpc.testing.PlayHandRequest', null, global);
goog.exportSymbol('proto.grpc.testing.PlayHandRequest.Intention', null, global);
goog.exportSymbol('proto.grpc.testing.PlayHandResponse', null, global);
goog.exportSymbol('proto.grpc.testing.PlayerState', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.AddAIPlayerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.AddAIPlayerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.testing.AddAIPlayerRequest.displayName = 'proto.grpc.testing.AddAIPlayerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.AddAIPlayerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.AddAIPlayerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.testing.AddAIPlayerResponse.displayName = 'proto.grpc.testing.AddAIPlayerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.EnterRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.EnterRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.testing.EnterRoomRequest.displayName = 'proto.grpc.testing.EnterRoomRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.CreateGameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.CreateGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.testing.CreateGameRequest.displayName = 'proto.grpc.testing.CreateGameRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.PlayHandRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.PlayHandRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.testing.PlayHandRequest.displayName = 'proto.grpc.testing.PlayHandRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.PlayHandResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.PlayHandResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.testing.PlayHandResponse.displayName = 'proto.grpc.testing.PlayHandResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.PlayerState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.PlayerState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.testing.PlayerState.displayName = 'proto.grpc.testing.PlayerState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.Game = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpc.testing.Game.repeatedFields_, null);
};
goog.inherits(proto.grpc.testing.Game, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.testing.Game.displayName = 'proto.grpc.testing.Game';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.Card = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.Card, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.testing.Card.displayName = 'proto.grpc.testing.Card';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.Hand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpc.testing.Hand.repeatedFields_, null);
};
goog.inherits(proto.grpc.testing.Hand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.testing.Hand.displayName = 'proto.grpc.testing.Hand';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.AddAIPlayerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.AddAIPlayerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.AddAIPlayerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.AddAIPlayerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.AddAIPlayerRequest}
 */
proto.grpc.testing.AddAIPlayerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.AddAIPlayerRequest;
  return proto.grpc.testing.AddAIPlayerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.AddAIPlayerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.AddAIPlayerRequest}
 */
proto.grpc.testing.AddAIPlayerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.AddAIPlayerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.AddAIPlayerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.AddAIPlayerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.AddAIPlayerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.grpc.testing.AddAIPlayerRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.testing.AddAIPlayerRequest} returns this
 */
proto.grpc.testing.AddAIPlayerRequest.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.AddAIPlayerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.AddAIPlayerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.AddAIPlayerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.AddAIPlayerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.AddAIPlayerResponse}
 */
proto.grpc.testing.AddAIPlayerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.AddAIPlayerResponse;
  return proto.grpc.testing.AddAIPlayerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.AddAIPlayerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.AddAIPlayerResponse}
 */
proto.grpc.testing.AddAIPlayerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.AddAIPlayerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.AddAIPlayerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.AddAIPlayerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.AddAIPlayerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string player_name = 1;
 * @return {string}
 */
proto.grpc.testing.AddAIPlayerResponse.prototype.getPlayerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.testing.AddAIPlayerResponse} returns this
 */
proto.grpc.testing.AddAIPlayerResponse.prototype.setPlayerName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.EnterRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.EnterRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.EnterRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.EnterRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playerId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.EnterRoomRequest}
 */
proto.grpc.testing.EnterRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.EnterRoomRequest;
  return proto.grpc.testing.EnterRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.EnterRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.EnterRoomRequest}
 */
proto.grpc.testing.EnterRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.EnterRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.EnterRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.EnterRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.EnterRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.grpc.testing.EnterRoomRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.testing.EnterRoomRequest} returns this
 */
proto.grpc.testing.EnterRoomRequest.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string player_id = 2;
 * @return {string}
 */
proto.grpc.testing.EnterRoomRequest.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.testing.EnterRoomRequest} returns this
 */
proto.grpc.testing.EnterRoomRequest.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.CreateGameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.CreateGameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.CreateGameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.CreateGameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.CreateGameRequest}
 */
proto.grpc.testing.CreateGameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.CreateGameRequest;
  return proto.grpc.testing.CreateGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.CreateGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.CreateGameRequest}
 */
proto.grpc.testing.CreateGameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.CreateGameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.CreateGameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.CreateGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.CreateGameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string player_id = 1;
 * @return {string}
 */
proto.grpc.testing.CreateGameRequest.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.testing.CreateGameRequest} returns this
 */
proto.grpc.testing.CreateGameRequest.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.PlayHandRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.PlayHandRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.PlayHandRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.PlayHandRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gameId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    intention: jspb.Message.getFieldWithDefault(msg, 3, 0),
    hand: (f = msg.getHand()) && proto.grpc.testing.Hand.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.PlayHandRequest}
 */
proto.grpc.testing.PlayHandRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.PlayHandRequest;
  return proto.grpc.testing.PlayHandRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.PlayHandRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.PlayHandRequest}
 */
proto.grpc.testing.PlayHandRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 3:
      var value = /** @type {!proto.grpc.testing.PlayHandRequest.Intention} */ (reader.readEnum());
      msg.setIntention(value);
      break;
    case 4:
      var value = new proto.grpc.testing.Hand;
      reader.readMessage(value,proto.grpc.testing.Hand.deserializeBinaryFromReader);
      msg.setHand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.PlayHandRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.PlayHandRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.PlayHandRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.PlayHandRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIntention();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getHand();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.grpc.testing.Hand.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.grpc.testing.PlayHandRequest.Intention = {
  CLAIM_TRUMP: 0,
  PLAY_HAND: 1,
  HIDE_KITTY: 2
};

/**
 * optional string player_id = 1;
 * @return {string}
 */
proto.grpc.testing.PlayHandRequest.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.testing.PlayHandRequest} returns this
 */
proto.grpc.testing.PlayHandRequest.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string game_id = 2;
 * @return {string}
 */
proto.grpc.testing.PlayHandRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.testing.PlayHandRequest} returns this
 */
proto.grpc.testing.PlayHandRequest.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Intention intention = 3;
 * @return {!proto.grpc.testing.PlayHandRequest.Intention}
 */
proto.grpc.testing.PlayHandRequest.prototype.getIntention = function() {
  return /** @type {!proto.grpc.testing.PlayHandRequest.Intention} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.grpc.testing.PlayHandRequest.Intention} value
 * @return {!proto.grpc.testing.PlayHandRequest} returns this
 */
proto.grpc.testing.PlayHandRequest.prototype.setIntention = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Hand hand = 4;
 * @return {?proto.grpc.testing.Hand}
 */
proto.grpc.testing.PlayHandRequest.prototype.getHand = function() {
  return /** @type{?proto.grpc.testing.Hand} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.Hand, 4));
};


/**
 * @param {?proto.grpc.testing.Hand|undefined} value
 * @return {!proto.grpc.testing.PlayHandRequest} returns this
*/
proto.grpc.testing.PlayHandRequest.prototype.setHand = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grpc.testing.PlayHandRequest} returns this
 */
proto.grpc.testing.PlayHandRequest.prototype.clearHand = function() {
  return this.setHand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grpc.testing.PlayHandRequest.prototype.hasHand = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.PlayHandResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.PlayHandResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.PlayHandResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.PlayHandResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    errorMessage: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.PlayHandResponse}
 */
proto.grpc.testing.PlayHandResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.PlayHandResponse;
  return proto.grpc.testing.PlayHandResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.PlayHandResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.PlayHandResponse}
 */
proto.grpc.testing.PlayHandResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.PlayHandResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.PlayHandResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.PlayHandResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.PlayHandResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.grpc.testing.PlayHandResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.grpc.testing.PlayHandResponse} returns this
 */
proto.grpc.testing.PlayHandResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.grpc.testing.PlayHandResponse.prototype.getErrorMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.testing.PlayHandResponse} returns this
 */
proto.grpc.testing.PlayHandResponse.prototype.setErrorMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.PlayerState.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.PlayerState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.PlayerState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.PlayerState.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cardsOnHand: (f = msg.getCardsOnHand()) && proto.grpc.testing.Hand.toObject(includeInstance, f),
    winningPile: (f = msg.getWinningPile()) && proto.grpc.testing.Hand.toObject(includeInstance, f),
    currentRoundTrick: (f = msg.getCurrentRoundTrick()) && proto.grpc.testing.Hand.toObject(includeInstance, f),
    score: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.PlayerState}
 */
proto.grpc.testing.PlayerState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.PlayerState;
  return proto.grpc.testing.PlayerState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.PlayerState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.PlayerState}
 */
proto.grpc.testing.PlayerState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = new proto.grpc.testing.Hand;
      reader.readMessage(value,proto.grpc.testing.Hand.deserializeBinaryFromReader);
      msg.setCardsOnHand(value);
      break;
    case 3:
      var value = new proto.grpc.testing.Hand;
      reader.readMessage(value,proto.grpc.testing.Hand.deserializeBinaryFromReader);
      msg.setWinningPile(value);
      break;
    case 4:
      var value = new proto.grpc.testing.Hand;
      reader.readMessage(value,proto.grpc.testing.Hand.deserializeBinaryFromReader);
      msg.setCurrentRoundTrick(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.PlayerState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.PlayerState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.PlayerState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.PlayerState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCardsOnHand();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.grpc.testing.Hand.serializeBinaryToWriter
    );
  }
  f = message.getWinningPile();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.grpc.testing.Hand.serializeBinaryToWriter
    );
  }
  f = message.getCurrentRoundTrick();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.grpc.testing.Hand.serializeBinaryToWriter
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string player_id = 1;
 * @return {string}
 */
proto.grpc.testing.PlayerState.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.testing.PlayerState} returns this
 */
proto.grpc.testing.PlayerState.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Hand cards_on_hand = 2;
 * @return {?proto.grpc.testing.Hand}
 */
proto.grpc.testing.PlayerState.prototype.getCardsOnHand = function() {
  return /** @type{?proto.grpc.testing.Hand} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.Hand, 2));
};


/**
 * @param {?proto.grpc.testing.Hand|undefined} value
 * @return {!proto.grpc.testing.PlayerState} returns this
*/
proto.grpc.testing.PlayerState.prototype.setCardsOnHand = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grpc.testing.PlayerState} returns this
 */
proto.grpc.testing.PlayerState.prototype.clearCardsOnHand = function() {
  return this.setCardsOnHand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grpc.testing.PlayerState.prototype.hasCardsOnHand = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Hand winning_pile = 3;
 * @return {?proto.grpc.testing.Hand}
 */
proto.grpc.testing.PlayerState.prototype.getWinningPile = function() {
  return /** @type{?proto.grpc.testing.Hand} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.Hand, 3));
};


/**
 * @param {?proto.grpc.testing.Hand|undefined} value
 * @return {!proto.grpc.testing.PlayerState} returns this
*/
proto.grpc.testing.PlayerState.prototype.setWinningPile = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grpc.testing.PlayerState} returns this
 */
proto.grpc.testing.PlayerState.prototype.clearWinningPile = function() {
  return this.setWinningPile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grpc.testing.PlayerState.prototype.hasWinningPile = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Hand current_round_trick = 4;
 * @return {?proto.grpc.testing.Hand}
 */
proto.grpc.testing.PlayerState.prototype.getCurrentRoundTrick = function() {
  return /** @type{?proto.grpc.testing.Hand} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.Hand, 4));
};


/**
 * @param {?proto.grpc.testing.Hand|undefined} value
 * @return {!proto.grpc.testing.PlayerState} returns this
*/
proto.grpc.testing.PlayerState.prototype.setCurrentRoundTrick = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grpc.testing.PlayerState} returns this
 */
proto.grpc.testing.PlayerState.prototype.clearCurrentRoundTrick = function() {
  return this.setCurrentRoundTrick(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grpc.testing.PlayerState.prototype.hasCurrentRoundTrick = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 score = 5;
 * @return {number}
 */
proto.grpc.testing.PlayerState.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.grpc.testing.PlayerState} returns this
 */
proto.grpc.testing.PlayerState.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpc.testing.Game.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.Game.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.Game.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.Game} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.Game.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    creatorPlayerId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dealerPlayerId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    nextTurnPlayerId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    currentRoundWinnerPlayerId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    playerStatesList: jspb.Message.toObjectList(msg.getPlayerStatesList(),
    proto.grpc.testing.PlayerState.toObject, includeInstance),
    kitty: (f = msg.getKitty()) && proto.grpc.testing.Hand.toObject(includeInstance, f),
    trumpSuit: jspb.Message.getFieldWithDefault(msg, 8, 0),
    trumpNum: jspb.Message.getFieldWithDefault(msg, 9, 0),
    deckCardCount: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.Game}
 */
proto.grpc.testing.Game.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.Game;
  return proto.grpc.testing.Game.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.Game} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.Game}
 */
proto.grpc.testing.Game.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatorPlayerId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDealerPlayerId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextTurnPlayerId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrentRoundWinnerPlayerId(value);
      break;
    case 6:
      var value = new proto.grpc.testing.PlayerState;
      reader.readMessage(value,proto.grpc.testing.PlayerState.deserializeBinaryFromReader);
      msg.addPlayerStates(value);
      break;
    case 7:
      var value = new proto.grpc.testing.Hand;
      reader.readMessage(value,proto.grpc.testing.Hand.deserializeBinaryFromReader);
      msg.setKitty(value);
      break;
    case 8:
      var value = /** @type {!proto.grpc.testing.Card.Suit} */ (reader.readEnum());
      msg.setTrumpSuit(value);
      break;
    case 9:
      var value = /** @type {!proto.grpc.testing.Card.Num} */ (reader.readEnum());
      msg.setTrumpNum(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeckCardCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.Game.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.Game.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.Game} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.Game.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreatorPlayerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDealerPlayerId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNextTurnPlayerId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCurrentRoundWinnerPlayerId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPlayerStatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.grpc.testing.PlayerState.serializeBinaryToWriter
    );
  }
  f = message.getKitty();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.grpc.testing.Hand.serializeBinaryToWriter
    );
  }
  f = message.getTrumpSuit();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getTrumpNum();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getDeckCardCount();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.grpc.testing.Game.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.testing.Game} returns this
 */
proto.grpc.testing.Game.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string creator_player_id = 2;
 * @return {string}
 */
proto.grpc.testing.Game.prototype.getCreatorPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.testing.Game} returns this
 */
proto.grpc.testing.Game.prototype.setCreatorPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string dealer_player_id = 3;
 * @return {string}
 */
proto.grpc.testing.Game.prototype.getDealerPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.testing.Game} returns this
 */
proto.grpc.testing.Game.prototype.setDealerPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string next_turn_player_id = 4;
 * @return {string}
 */
proto.grpc.testing.Game.prototype.getNextTurnPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.testing.Game} returns this
 */
proto.grpc.testing.Game.prototype.setNextTurnPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string current_round_winner_player_id = 5;
 * @return {string}
 */
proto.grpc.testing.Game.prototype.getCurrentRoundWinnerPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.testing.Game} returns this
 */
proto.grpc.testing.Game.prototype.setCurrentRoundWinnerPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated PlayerState player_states = 6;
 * @return {!Array<!proto.grpc.testing.PlayerState>}
 */
proto.grpc.testing.Game.prototype.getPlayerStatesList = function() {
  return /** @type{!Array<!proto.grpc.testing.PlayerState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpc.testing.PlayerState, 6));
};


/**
 * @param {!Array<!proto.grpc.testing.PlayerState>} value
 * @return {!proto.grpc.testing.Game} returns this
*/
proto.grpc.testing.Game.prototype.setPlayerStatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.grpc.testing.PlayerState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpc.testing.PlayerState}
 */
proto.grpc.testing.Game.prototype.addPlayerStates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.grpc.testing.PlayerState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.grpc.testing.Game} returns this
 */
proto.grpc.testing.Game.prototype.clearPlayerStatesList = function() {
  return this.setPlayerStatesList([]);
};


/**
 * optional Hand kitty = 7;
 * @return {?proto.grpc.testing.Hand}
 */
proto.grpc.testing.Game.prototype.getKitty = function() {
  return /** @type{?proto.grpc.testing.Hand} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.Hand, 7));
};


/**
 * @param {?proto.grpc.testing.Hand|undefined} value
 * @return {!proto.grpc.testing.Game} returns this
*/
proto.grpc.testing.Game.prototype.setKitty = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grpc.testing.Game} returns this
 */
proto.grpc.testing.Game.prototype.clearKitty = function() {
  return this.setKitty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grpc.testing.Game.prototype.hasKitty = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Card.Suit trump_suit = 8;
 * @return {!proto.grpc.testing.Card.Suit}
 */
proto.grpc.testing.Game.prototype.getTrumpSuit = function() {
  return /** @type {!proto.grpc.testing.Card.Suit} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.grpc.testing.Card.Suit} value
 * @return {!proto.grpc.testing.Game} returns this
 */
proto.grpc.testing.Game.prototype.setTrumpSuit = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional Card.Num trump_num = 9;
 * @return {!proto.grpc.testing.Card.Num}
 */
proto.grpc.testing.Game.prototype.getTrumpNum = function() {
  return /** @type {!proto.grpc.testing.Card.Num} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.grpc.testing.Card.Num} value
 * @return {!proto.grpc.testing.Game} returns this
 */
proto.grpc.testing.Game.prototype.setTrumpNum = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional int32 deck_card_count = 10;
 * @return {number}
 */
proto.grpc.testing.Game.prototype.getDeckCardCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.grpc.testing.Game} returns this
 */
proto.grpc.testing.Game.prototype.setDeckCardCount = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.Card.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.Card.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.Card} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.Card.toObject = function(includeInstance, msg) {
  var f, obj = {
    suit: jspb.Message.getFieldWithDefault(msg, 1, 0),
    num: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.Card}
 */
proto.grpc.testing.Card.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.Card;
  return proto.grpc.testing.Card.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.Card} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.Card}
 */
proto.grpc.testing.Card.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.grpc.testing.Card.Suit} */ (reader.readEnum());
      msg.setSuit(value);
      break;
    case 2:
      var value = /** @type {!proto.grpc.testing.Card.Num} */ (reader.readEnum());
      msg.setNum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.Card.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.Card.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.Card} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.Card.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuit();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getNum();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.grpc.testing.Card.Suit = {
  SUIT_UNDEFINED: 0,
  HEATS: 1,
  SPADES: 2,
  CLUBS: 3,
  DIAMONDS: 4,
  SMALL_JOKER: 5,
  BIG_JOKER: 6
};

/**
 * @enum {number}
 */
proto.grpc.testing.Card.Num = {
  NUM_UNDEFINED: 0,
  TWO: 1,
  THREE: 2,
  FOUR: 3,
  FIVE: 4,
  SIX: 5,
  SEVEN: 6,
  EIGHT: 7,
  NINE: 8,
  TEN: 9,
  JACK: 10,
  QUEEN: 11,
  KING: 12,
  ACE: 13
};

/**
 * optional Suit suit = 1;
 * @return {!proto.grpc.testing.Card.Suit}
 */
proto.grpc.testing.Card.prototype.getSuit = function() {
  return /** @type {!proto.grpc.testing.Card.Suit} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.grpc.testing.Card.Suit} value
 * @return {!proto.grpc.testing.Card} returns this
 */
proto.grpc.testing.Card.prototype.setSuit = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Num num = 2;
 * @return {!proto.grpc.testing.Card.Num}
 */
proto.grpc.testing.Card.prototype.getNum = function() {
  return /** @type {!proto.grpc.testing.Card.Num} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.grpc.testing.Card.Num} value
 * @return {!proto.grpc.testing.Card} returns this
 */
proto.grpc.testing.Card.prototype.setNum = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpc.testing.Hand.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.Hand.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.Hand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.Hand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.Hand.toObject = function(includeInstance, msg) {
  var f, obj = {
    cardsList: jspb.Message.toObjectList(msg.getCardsList(),
    proto.grpc.testing.Card.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.Hand}
 */
proto.grpc.testing.Hand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.Hand;
  return proto.grpc.testing.Hand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.Hand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.Hand}
 */
proto.grpc.testing.Hand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.testing.Card;
      reader.readMessage(value,proto.grpc.testing.Card.deserializeBinaryFromReader);
      msg.addCards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.Hand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.Hand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.Hand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.Hand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.grpc.testing.Card.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Card cards = 1;
 * @return {!Array<!proto.grpc.testing.Card>}
 */
proto.grpc.testing.Hand.prototype.getCardsList = function() {
  return /** @type{!Array<!proto.grpc.testing.Card>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpc.testing.Card, 1));
};


/**
 * @param {!Array<!proto.grpc.testing.Card>} value
 * @return {!proto.grpc.testing.Hand} returns this
*/
proto.grpc.testing.Hand.prototype.setCardsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.grpc.testing.Card=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpc.testing.Card}
 */
proto.grpc.testing.Hand.prototype.addCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.grpc.testing.Card, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.grpc.testing.Hand} returns this
 */
proto.grpc.testing.Hand.prototype.clearCardsList = function() {
  return this.setCardsList([]);
};


goog.object.extend(exports, proto.grpc.testing);
