# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import shengji_pb2 as shengji__pb2


class ShengjiStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.createGame = channel.unary_unary(
                '/grpc.testing.Shengji/createGame',
                request_serializer=shengji__pb2.CreateGameRequest.SerializeToString,
                response_deserializer=shengji__pb2.Game.FromString,
                )
        self.enterRoom = channel.unary_stream(
                '/grpc.testing.Shengji/enterRoom',
                request_serializer=shengji__pb2.EnterRoomRequest.SerializeToString,
                response_deserializer=shengji__pb2.Game.FromString,
                )
        self.playHand = channel.unary_unary(
                '/grpc.testing.Shengji/playHand',
                request_serializer=shengji__pb2.PlayHandRequest.SerializeToString,
                response_deserializer=shengji__pb2.PlayHandResponse.FromString,
                )
        self.addAIPlayer = channel.unary_unary(
                '/grpc.testing.Shengji/addAIPlayer',
                request_serializer=shengji__pb2.AddAIPlayerRequest.SerializeToString,
                response_deserializer=shengji__pb2.AddAIPlayerResponse.FromString,
                )


class ShengjiServicer(object):
    """Missing associated documentation comment in .proto file."""

    def createGame(self, request, context):
        """Creates a new game.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def enterRoom(self, request, context):
        """Enters the room if the player has not entered the room yet. Streams back
        the game whenever game state changes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def playHand(self, request, context):
        """Plays a hand or tries to claim trump suit.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addAIPlayer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ShengjiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'createGame': grpc.unary_unary_rpc_method_handler(
                    servicer.createGame,
                    request_deserializer=shengji__pb2.CreateGameRequest.FromString,
                    response_serializer=shengji__pb2.Game.SerializeToString,
            ),
            'enterRoom': grpc.unary_stream_rpc_method_handler(
                    servicer.enterRoom,
                    request_deserializer=shengji__pb2.EnterRoomRequest.FromString,
                    response_serializer=shengji__pb2.Game.SerializeToString,
            ),
            'playHand': grpc.unary_unary_rpc_method_handler(
                    servicer.playHand,
                    request_deserializer=shengji__pb2.PlayHandRequest.FromString,
                    response_serializer=shengji__pb2.PlayHandResponse.SerializeToString,
            ),
            'addAIPlayer': grpc.unary_unary_rpc_method_handler(
                    servicer.addAIPlayer,
                    request_deserializer=shengji__pb2.AddAIPlayerRequest.FromString,
                    response_serializer=shengji__pb2.AddAIPlayerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc.testing.Shengji', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Shengji(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def createGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.testing.Shengji/createGame',
            shengji__pb2.CreateGameRequest.SerializeToString,
            shengji__pb2.Game.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def enterRoom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.testing.Shengji/enterRoom',
            shengji__pb2.EnterRoomRequest.SerializeToString,
            shengji__pb2.Game.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def playHand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.testing.Shengji/playHand',
            shengji__pb2.PlayHandRequest.SerializeToString,
            shengji__pb2.PlayHandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addAIPlayer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.testing.Shengji/addAIPlayer',
            shengji__pb2.AddAIPlayerRequest.SerializeToString,
            shengji__pb2.AddAIPlayerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
