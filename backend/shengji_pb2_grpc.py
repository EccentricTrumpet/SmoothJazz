# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import shengji_pb2 as shengji__pb2


class ShengjiStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateGame = channel.unary_unary(
                '/grpc.testing.Shengji/CreateGame',
                request_serializer=shengji__pb2.CreateGameRequest.SerializeToString,
                response_deserializer=shengji__pb2.Game.FromString,
                )
        self.EnterRoom = channel.unary_stream(
                '/grpc.testing.Shengji/EnterRoom',
                request_serializer=shengji__pb2.EnterRoomRequest.SerializeToString,
                response_deserializer=shengji__pb2.Game.FromString,
                )
        self.PlayHand = channel.unary_unary(
                '/grpc.testing.Shengji/PlayHand',
                request_serializer=shengji__pb2.PlayHandRequest.SerializeToString,
                response_deserializer=shengji__pb2.PlayHandResponse.FromString,
                )
        self.AddAIPlayer = channel.unary_unary(
                '/grpc.testing.Shengji/AddAIPlayer',
                request_serializer=shengji__pb2.AddAIPlayerRequest.SerializeToString,
                response_deserializer=shengji__pb2.AddAIPlayerResponse.FromString,
                )


class ShengjiServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateGame(self, request, context):
        """Creates a new game.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnterRoom(self, request, context):
        """Enters the room if the player has not entered the room yet. Streams back
        the game whenever game state changes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlayHand(self, request, context):
        """Plays a hand or tries to claim trump suit.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddAIPlayer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ShengjiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateGame': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGame,
                    request_deserializer=shengji__pb2.CreateGameRequest.FromString,
                    response_serializer=shengji__pb2.Game.SerializeToString,
            ),
            'EnterRoom': grpc.unary_stream_rpc_method_handler(
                    servicer.EnterRoom,
                    request_deserializer=shengji__pb2.EnterRoomRequest.FromString,
                    response_serializer=shengji__pb2.Game.SerializeToString,
            ),
            'PlayHand': grpc.unary_unary_rpc_method_handler(
                    servicer.PlayHand,
                    request_deserializer=shengji__pb2.PlayHandRequest.FromString,
                    response_serializer=shengji__pb2.PlayHandResponse.SerializeToString,
            ),
            'AddAIPlayer': grpc.unary_unary_rpc_method_handler(
                    servicer.AddAIPlayer,
                    request_deserializer=shengji__pb2.AddAIPlayerRequest.FromString,
                    response_serializer=shengji__pb2.AddAIPlayerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc.testing.Shengji', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Shengji(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.testing.Shengji/CreateGame',
            shengji__pb2.CreateGameRequest.SerializeToString,
            shengji__pb2.Game.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnterRoom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.testing.Shengji/EnterRoom',
            shengji__pb2.EnterRoomRequest.SerializeToString,
            shengji__pb2.Game.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PlayHand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.testing.Shengji/PlayHand',
            shengji__pb2.PlayHandRequest.SerializeToString,
            shengji__pb2.PlayHandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddAIPlayer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.testing.Shengji/AddAIPlayer',
            shengji__pb2.AddAIPlayerRequest.SerializeToString,
            shengji__pb2.AddAIPlayerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
