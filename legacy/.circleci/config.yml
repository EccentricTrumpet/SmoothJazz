version: 2.1

orbs:
  azure-acr: circleci/azure-acr@0.2.0
  docker: circleci/docker@1.5.0
  kubernetes: circleci/kubernetes@0.4.0

jobs:
  test-backend:
    working_directory: ~/repo/backend
    docker:
      - image: circleci/python:3.8
    resource_class: small
    steps:
      - checkout:
          path: ~/repo
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.8/site-packages
      - restore_cache:  # ensure this step occurs *before* installing dependencies
          key: backend-pipenv-{{ checksum "Pipfile" }}-{{ checksum "Pipfile.lock" }}
      - run: PIPENV_VENV_IN_PROJECT=enabled pipenv sync
      - save_cache:
          key: backend-pipenv-{{ checksum "Pipfile" }}-{{ checksum "Pipfile.lock" }}
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.8/site-packages"
      - run: sudo apt install -y protobuf-compiler
      - run: pipenv run make test
      - persist_to_workspace:
          root: .
          paths:
            - shengji_pb2.py
            - shengji_pb2_grpc.py
  test-frontend:
    working_directory: ~/repo/frontend
    docker:
      - image: circleci/node:10-browsers
    resource_class: small
    steps:
      - checkout:
          path: ~/repo
      - restore_cache:
          key: frontend-npm-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
      - run: "[[ -d node_modules ]] || npm ci"
      - save_cache:
          key: frontend-npm-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
          paths:
            - "node_modules"
      - run: sudo apt install -y protobuf-compiler
      - run: npm test -- --configuration ci --browsers=ChromeHeadlessCI
  deploy-aks:
    docker:
      - image: circleci/node:10
    resource_class: small
    steps:
      - checkout
      # Install docker with buildkit support
      - setup_remote_docker:
          version: 20.10.2
      # Build frontend
      - restore_cache:
          key: frontend-npm-docker-v2-{{ checksum "frontend/package.json" }}-{{ checksum "frontend/package-lock.json" }}
      - run: cd ./frontend && [[ -d node_modules ]] || npm ci
      - save_cache:
          key: frontend-npm-docker-v2-{{ checksum "frontend/package.json" }}-{{ checksum "frontend/package-lock.json" }}
          paths:
            - "frontend/node_modules"
      - run: sudo apt install -y protobuf-compiler
      - run: cd ./frontend && npm run build -- --configuration production,ci
      - azure-acr/build-and-push-image:
          path: frontend
          login-server-name: smoothjazz.azurecr.io
          registry-name: smoothjazz
          repo: frontend
          tag: ci-<< pipeline.number >>
      # Build proxy
      - azure-acr/build-and-push-image:
          path: ./proxy
          login-server-name: smoothjazz.azurecr.io
          registry-name: smoothjazz
          repo: proxy
          tag: ci-<< pipeline.number >>
      # Build backend
      - attach_workspace:
          at: backend
      - azure-acr/build-and-push-image:
          path: ./backend
          login-server-name: smoothjazz.azurecr.io
          registry-name: smoothjazz
          repo: backend
          tag: ci-<< pipeline.number >>
      # Update aks deployment
      - kubernetes/install
      - run: az aks get-credentials --name smoothjazzapp --resource-group RhythmicBass
      - kubernetes/update-container-image:
          resource-name: deployment/smoothjazzapp
          container-image-updates: >-
            backend=smoothjazz.azurecr.io/backend:ci-<< pipeline.number >>
            proxy=smoothjazz.azurecr.io/proxy:ci-<< pipeline.number >>
            frontend=smoothjazz.azurecr.io/frontend:ci-<< pipeline.number >>
          record: true
          show-kubectl-command: true

workflows:
  build:
    jobs:
      - test-backend
      - test-frontend
      - deploy-aks:
          requires:
            - test-backend
            - test-frontend
          filters:
            branches:
              only: main
