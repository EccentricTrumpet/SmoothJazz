syntax = "proto3";
package grpc.testing;

service Shengji {
  // Creates a new game.
  rpc createGame(CreateGameRequest) returns (Game);

  // Join the game if the player. Streams back the game whenever game state changes.
  rpc joinGame(JoinGameRequest) returns (stream Game);

  // Plays a hand or tries to claim trump suit.
  rpc playHand(PlayHandRequest) returns (PlayHandResponse);

  rpc addAIPlayer(AddAIPlayerRequest) returns (AddAIPlayerResponse);

  rpc drawCards(DrawCardsRequest) returns (DrawCardsResponse);
}

// Request and response protos
message AddAIPlayerRequest {
  string game_id = 1;
  enum AIType {
    // Dummy AI that does nothing
    NONE = 0;
    // Smart AI that declares trump and play randome cards
    AARON_AI = 1;
  }
  AIType ai_type = 2;
}

message AddAIPlayerResponse {
  string player_name = 1;
}

message DrawCardsRequest {
  string game_id = 1;
  string player_name = 2;
}

message DrawCardsResponse {
}

message JoinGameRequest {
  string game_id = 1;
  string player_name = 2;
}

message CreateGameRequest {
  string player_name = 1;
  // Game speed as an integer multiplier, 1 is slowest, 1000 is fastest.
  int32 game_speed = 2;
  // Should only be set to true for debugging purpose.
  bool show_other_player_hands = 3;
}

message CreateGameResponse {
  string game_id = 1;
}

message PlayHandRequest{
  string player_name = 1;
  string game_id = 2;

  enum Intention {
    // Claims trump suit - this is only valid while cards are being served.
    CLAIM_TRUMP = 0;
    // Plays a hand.
    PLAY_HAND = 1;
    // Hides kitty cards.
    HIDE_KITTY = 2;
  }

  Intention intention = 3;
  Hand hand = 4;
}

message PlayHandResponse{
  // TODO: Ideally FE only needs to handle RPC failure. Use a boolean here for
  // now.
  bool success = 1;
  string error_message = 2;
}

// Player
message Player {
  // ID of the player
  string player_name = 1;

  // Cards you have on your hand
  Hand cards_on_hand = 2;

  // Cards you have in your winning pile
  Hand winning_pile = 3;

  // Cards played in the current ongoing round
  Hand current_round_trick = 4;

  // You current score
  int32 score = 5;

  // Player's latest rank when the player's team is the kitty player.
  Card.Rank latest_rank = 8;
}

message Game {
  // Game ID.
  string game_id = 1;

  // Creator of the game.
  string creator_player_name = 2;

  // Dealer of this round. The dealer is the first player to play a hand and
  // has RO access to kitty.
  string kitty_player_name = 3;

  // Player who needs to play a hand.
  // Either "ANYONE" or a specific user id.
  //
  // ANYONE: Anyone can claim trump
  // specific user id: Only that user can play (hide kitty or play a hand)
  string next_turn_player_name = 4;

  // Player who wins the current round.
  string current_round_winner_player_name = 5;

  // All players. Private states will be redacted by the server (e.g.
  // other players' hand cards).
  // Order of players == play order.
  // The first player is guaranteed to be the caller.
  repeated Player players = 6;

  // Kitty/hidden hand. This is only visible to the dealer.
  Hand kitty = 7;

  // Current rank we are playing.
  Card.Rank current_rank = 8;

  // Currently declared trump cards.
  Hand trump_cards = 9;

  // Player ID who declared current trump cards.
  string trump_player_name = 10;

  enum GameState {
    SUIT_UNDEFINED = 0;
    // Waiting for players to join the game
    AWAIT_JOIN = 1;
    // Waiting to deal/draw
    AWAIT_DEAL = 2;
    // Dealing/drawing
    DEAL = 3;
    // Finished dealing but before dealer clicks to see the kitty
    AWAIT_TRUMP_DECLARATION = 4;
    // Dealing Kitty
    DEAL_KITTY = 5;
    // Hiding Kitty
    HIDE_KITTY = 6;
    // Playing
    PLAY = 7;
    // Round ended
    ROUND_END = 8;
  }

  // Game State.
  GameState state = 11;

  // Total score for kitty player and his teammates. THis can be
  // theoretically calculated using player.score, but perform the
  // summation logic in backend to keep frontend thin.
  int32 total_score = 12;

  // Update id, a sequence of natural numbers
  int32 update_id = 100;

  // Updates that represent the delta since the last update
  oneof update {
    NewPlayerUpdate new_player_update = 101;
    CardDealtUpdate card_dealt_update = 102;
    KittyHiddenUpdate kitty_hidden_update = 103;
    TrickPlayedUpdate trick_played_update = 104;
    RoundEndUpdate round_end_update = 105;
  }
}

message NewPlayerUpdate {
  // Player who joined.
  string player_name = 1;
}

message CardDealtUpdate {
  // Player to whom the card was dealt.
  string player_name = 1;
  Card card = 2;
}

message KittyHiddenUpdate {
  // Kitty player.
  string kitty_player_name = 1;
}

message TrickPlayedUpdate {
  // Player who plays hands
  string player_name = 1;
  Hand hand_played = 2;
}

message RoundEndUpdate {
  string round_end_message = 1;
}

message Card {
  enum Suit {
    SUIT_UNDEFINED = 0;
    HEARTS = 1;
    SPADES = 2;
    CLUBS = 3;
    DIAMONDS = 4;
    SMALL_JOKER = 5;
    BIG_JOKER = 6;
  }

  enum Rank {
    RANK_UNDEFINED = 0;
    ACE = 1;
    TWO = 2;
    THREE = 3;
    FOUR = 4;
    FIVE = 5;
    SIX = 6;
    SEVEN = 7;
    EIGHT = 8;
    NINE = 9;
    TEN = 10;
    JACK = 11;
    QUEEN = 12;
    KING = 13;
  }

  Suit suit = 1;
  Rank rank = 2;
}

message Hand {
  repeated Card cards = 1;
}
